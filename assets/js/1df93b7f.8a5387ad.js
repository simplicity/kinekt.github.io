"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4583],{8813:(e,n,s)=>{s.r(n),s.d(n,{default:()=>z});var i=s(5252),t=s(5958),r=s(5855),a=s(3526);const o={outer:"outer_uam_",line:"line_Kh9u"};var c=s(6070);function l(e){return(0,c.jsxs)("div",{className:(0,a.A)(o.outer,e.className),children:[(0,c.jsx)("div",{className:o.line}),e.children]})}const d={outer:"outer_Km0Y",texts:"texts_Kb8a",purpleBlob:"purpleBlob_q1Zw"};function u(){return(0,c.jsxs)("div",{className:d.outer,children:[(0,c.jsx)("img",{className:d.purpleBlob,src:"img/purple-blob-1.png"}),(0,c.jsxs)("div",{className:d.texts,children:[(0,c.jsx)("h1",{children:"Write Backend Code And Get The Client For Free."}),(0,c.jsx)("p",{children:"Kinekt automatically derives the client with which you call your endpoint."})]}),(0,c.jsx)(l,{children:(0,c.jsx)(r.A,{language:"TypeScript",showLineNumbers:!0,children:p})})]})}const p='\nexport const getUser = app.createEndpoint(\n  "GET /users/:id",\n\n  {\n    params: z.object({ id: z.string() }),\n    response: { 200: z.custom<User>() },\n  },\n\n  async ({ params }) => {\n    const user = await db.users.findOne(params.id);\n\n    return {\n      statusCode: 200,\n      body: user,\n    };\n  }\n);\n\nconst user = await getUser({ params: { id: "some-id" } });\n',h={outer:"outer_mwv8",row:"row_AyRM",paragraphs:"paragraphs_gitR",blueBlob:"blueBlob_Jqpe",illustration:"illustration_C_iG"};function m(){return(0,c.jsxs)("div",{className:h.outer,children:[(0,c.jsx)("img",{className:h.illustration,src:"img/pipeline-illustration.svg"}),(0,c.jsx)("img",{className:h.blueBlob,src:"img/blue-blob-1.png"}),(0,c.jsx)("h1",{children:"Middlewares and Pipelines"}),(0,c.jsxs)("div",{className:h.row,children:[(0,c.jsxs)("div",{className:h.paragraphs,children:[(0,c.jsx)("p",{children:"Kinekt uses middlewares which are combined into pipelines to handle requests."}),(0,c.jsx)("p",{children:"An incoming request will be transformed into a context object and passed through a given pipeline."}),(0,c.jsx)("p",{children:"Every endpoint is a stand-alone pipeline."})]}),(0,c.jsx)(l,{children:(0,c.jsx)(r.A,{language:"TypeScript",showLineNumbers:!0,children:g})})]})]})}const g="\nconst pipeline = createPipeline(\n  cors(),\n  authenticate(),\n  checkAcceptHeader(),\n  deserialize(),\n  basicEndpoint(params),\n  serialize(),\n  finalize()\n)\n\nconst result = await pipeline(context)\n",x={outer:"outer_oWJX",texts:"texts_GStX",blueBlob:"blueBlob_s0HL",illustration:"illustration_AAq2"};function b(){return(0,c.jsxs)("div",{className:x.outer,children:[(0,c.jsx)("img",{className:x.blueBlob,src:"img/blue-blob-2.png"}),(0,c.jsxs)("div",{className:x.texts,children:[(0,c.jsx)("h1",{children:"Efficient Routing"}),(0,c.jsx)("p",{children:"Kinekt uses a route tree, compiled at startup, to efficiently dispatch incoming requests to the correct pipelines."})]}),(0,c.jsx)("img",{className:x.illustration,src:"img/router-illustration.svg"})]})}const j={outer:"outer_mWG7"};function y(){return(0,c.jsxs)("div",{className:j.outer,children:[(0,c.jsx)("h1",{children:"Type Safety"}),(0,c.jsx)("p",{children:"Kinekt takes full advantage of the TypeScript Compiler to write 100% type safe code."}),(0,c.jsx)(l,{children:(0,c.jsx)(r.A,{language:"TypeScript",showLineNumbers:!0,children:w})}),(0,c.jsx)(l,{children:(0,c.jsx)(r.A,{language:"TypeScript",showLineNumbers:!0,children:f})})]})}const w="\nconst pipeline = createPipeline(\n  ...,\n  authenticate(), //                     <-- adding authenticate middleware\n  ...\n);\n\nexport const getUser = app.createEndpoint(\n  // ...\n\n  async ({ context }) => {\n    const currentUser = context.user; // <-- the compiler gives an error if the\n                                      //     authenticate middleware is not\n                                      //     present in the pipeline.\n\n    // ...\n  }\n);\n",f='\nexport const createUser = testPipeline.createEndpoint(\n  "POST /organization/:organizationId/users",\n  //                        ^---- by using a param segment, you are forced to\n  //                              use a \'params\' schema containing\n  //                              \'organizationId\' (see below).\n\n  // ^---- by using POST method here, you are forced to declare a body schema\n  //       (see below).\n\n  {\n    params: z.object({ organizationId: z.string() }), //    <- params schema\n    query: z.object({ private: zodBooleanFromString() }),\n    body: z.object({ email: z.string() }), //               <- body schema\n\n    response: {\n      // You must explicitly declare which bodies are returned for which status\n      // codes.\n      200: z.custom<User>(),\n      409: z.custom<{ message: string }>(),\n    },\n  },\n\n  async ({ params, query, body, context }) => {\n    // You must return bodies and status codes as declared in the response\n    // schemas.\n    if (body.email === "existing@email.com") {\n      return {\n        statusCode: 409,\n        body: { message: "User with this email already exists" },\n      };\n    }\n\n    return {\n      statusCode: 200,\n      body: {\n        id: "some-id",\n        email: body.email,\n        organizationId: params.organizationId,\n        private: query.private,\n      },\n    };\n  }\n);\n',v={header:"header_cMr4"};function N(){const{siteConfig:e}=(0,i.A)();return(0,c.jsxs)(t.A,{title:`Hello from ${e.title}`,description:"Description will go into a meta tag in <head />",noFooter:!0,children:[(0,c.jsxs)("header",{className:v.header,children:[(0,c.jsx)("h1",{children:"Build REST APIs With High Precision."}),(0,c.jsx)("h2",{children:"Kinekt is a Zero-Dependency TypeScript Web Framework."}),(0,c.jsx)("img",{src:"img/herobg.png"})]}),(0,c.jsxs)("main",{children:[(0,c.jsx)(u,{}),(0,c.jsx)(m,{}),(0,c.jsx)(b,{}),(0,c.jsx)(y,{})]})]})}function z(){return(0,c.jsx)(N,{})}}}]);